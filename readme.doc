蓝桥云课  https://www.lanqiao.cn/courses/1330

每个人都应该学习一门编程语言，它会教你如何思考。我把计算机科学看成基础教育，每个人都应该花至少 1 年时间学习编程。

—— 史蒂夫 · 乔布斯

短短 20 年间，「计算机和互联网」以一种前所未有的速度，改变了人类的生活 。

我们使用微信「交流」，使用淘宝「购物」，使用搜索引擎「获取信息」，随着 Uber、滴滴、饿了么的出现，甚至我们的出行、吃饭都越来越离不开互联网了。

而这些改变，都来源于 编程。

如果说上个世纪是全球化的时代，掌握了英语，就能成为时代的宠儿；那么在语义识别 和 人工智能愈发成熟的今天，「人和人的沟通」不再是难题，「人和计算机的沟通」会显得越来越重要。

想象一下：

如果一个产品经理能通过编程，轻松整理出万级的「用户画像」；

如果一个运营能「自动化获取网站、用户数据」，减少 50% 的人力劳动；

如果一个行政能「自动化员工考勤和工资核算」，将原来 5 天的工作量缩短到 1 个下午……

当你是 CEO，你凭什么不给他们更高的薪资和地位？

与之相对的，太多的铁饭碗会不复存在：计算器取代了算盘、语音识别取代了打字员、现代化机械取代了工人和农民……而未来，司机、翻译、设计师、文案等等，都可能会被人工智能取代。

这种劳动力的升级，已经在人类历史上发生了很多次。

图片描述 (阿里的人工智能设计师「鲁班」，一天可以完成 4000 万张设计图，图片来源 )

因此，编程几乎成为现代人的一道必选题。即使你不想成为一名专业的程序员，编程也能让你的职业前景和生活乐趣大大提升。

编程是一门手艺活，是一门实践学科 —— 就像你无法通过看书、看视频学会打篮球，编程也是一样。你必须要靠写代码、做项目的方式，来学好编程，否则一定会遇到“视频看完了，但还是不会写代码”的窘境。

学习编程最有效的方法莫过于：写代码 -->> 思考 -->> 总结
2. 完成挑战——思考
在每节实验后，我们准备了一个「挑战」，你需要运用上一节学到的知识，独立思考，完成一个功能或实现目标。

挑战的过程是真正 培养编程思维 的过程，你可能会陷入一种「心流」的状态 —— 走路、吃饭时，都在思考代码该怎么写。一旦想通，回到电脑前如行云流水般写出代码，你会发现自己的水平提高了一大节，编程能力也远远超越了同期只看书、看视频的同学。

3. 做笔记、画脑图——总结

4. 和小伙伴组队学习
在编程这么一个相对陌生的领域，一个人孤零零地学习，遇到问题连怎么百度都不知道，很容易陷入“沮丧、焦虑”等负面情绪……

更有效的方式是和小伙伴组队学习，时不时地分享一下自己的作品和代码，用正向反馈激励自己持续学习，这跟玩游戏挺像的。所以，如果觉得课程对你有帮助，不妨推荐给你的小伙伴一起学习吧！

迄今为止，80% 以上的智能手机，都使用着基于 Linux 内核的 Android 系统；全球排名前 500 的超级计算机中，98% 在用 Linux；绝大部分你所使用的互联网产品，也都运行在 Linux 系统的服务器上……

Linux 目录操作
查看目录中的内容：ls
进入目录：cd (-,..,~)
查看目录结构：tree

使用 pwd 命令可以获取当前目录的绝对路径
如果忘记了目录名、文件名或命令，可使用 Tab 键自动补全，还可避免输入错误；连续按两次 Tab 可以显示全部候选结果。

使用 mkdir 命令可创建目录，mkdir mycode 的意思就是新建一个名为 mycode 的目录。

Linux 中对文件的常用操作
touch 命令可以新建文件
cp 命令（Copy）复制文件到指定目录下
使用 rm 命令删除文件
使用 mv 命令可以移动文件或目录
mv 命令还可以用来重命名，如 mv test1 test2， 会把 test1 重命名为 test2.
使用 cat 命令，可以将文件中的内容打印到屏幕上

认识 Python
实验知识点
print()
数据类型
变量
input()
运算符
Python 的数据类型有 int(整数)、float(浮点数)、字符串、布尔值、None、列表、元组、字典、集合等。
空值 None:在 Python 中是一个特殊的值，表示“无”。注意它与数值 0 不同，0 是一个整数，而 无 表示什么都没有。

 索引
字符串是一堆字符的集合，可以通过位置编号，来获得对应的字符。如 'hello_shiyanlou'，编号 0 对应第一个字符 h，1 对应第二个字符 e，依次类推。这个位置的编号，我们称之为：索引
索引除了是正数，也可以是 负值，表示倒数第几个。比如最后一个字符的索引为 -1，倒数第二个字符的索引为 -2。

format():专门用来 格式化字符串 的函数，它最常用的功能就是「插入数据」和「数字格式化」。
print('你叫{}，今年{}岁了'.format(name,age))
{} 为占位符，我先把这个位置占住，具体数据在后面导入。
format() 的第二种常用功能，是格式化数字，比如我们要输出圆周率，但只保留两位小数，可以这么写：print("{:.2f}".format(3.1415926))

流程控制
if结构
a = int(input("Please enter a number: "))
## 让用户输入一个数字，用变量 a 接受
if a > 10:   
    print('a > 10')
elif a == 10:
    print('a == 10')
else:
    print('a < 10')

for循环主要用于对一个范围内的每个元素进行指定操作。

for item(元素) in iterable(集合):
namelist = ['Sophia','Emma','Olivia','Ava']
# 点名册
for i in namelist:
    print(i) 

range() 函数：如果需要处理一组数字列表，并且数字列表满足一定的规律，可以使用 Python 的内置函数 range()（范围）。
使用 range(x) 函数，可以生成一个从 0 到 x-1 的整数序列，比如我们想打印 0 到 9 的数，可以这样写：for a in range(10):
for a in range(1,11):
      print('书桓走的第 {} 天，想他'.format(i))

while condition(成立的条件):
a = 1  ##打印1到10
while a <= 10:  
    print(a)
    a = a + 1

“逢 7 过”的游戏：几个人轮流报数，凡遇到 7 的倍数，或含 7 的数字就要跳过，否则就算失败。
今天我们就用 Python 来打印 1 到 100 之间，所有满足条件的数字。
for i in range(1,101):
	if i%7==0 or i%10==7 or int(i/10)==7:
		continue
	print(i)
#if i%7==0 or i%10==7 or i//10==7:

Git 和 Github 都是程序员每天都要用到的东西 —— 前者是目前最先进的 版本控制工具，拥有最多的用户，且管理着地球上最庞大的代码仓库；而后者是全球最大代码托管平台、开源社区。
什么是版本控制
简单复述一下文章中的例子：大四毕业生 小张 在写 毕业论文，他经常删删改改，有时还会后悔“昨天那个思路那么好，我怎么就给删了”。
有了多次教训后，他决定每次写之前都先复制一份，在复制的那份里修改，这么一来，文件夹里有了：
毕业论文_修改1.doc
毕业论文_修改2.doc
毕业论文_修改3.doc
毕业论文_完整版1.doc
毕业论文_最终版1.doc
小张想：“虽然很痛苦，但不至于丢掉以前的灵感了吧……等等，最终版和确定版哪个是昨天写的来着？？？”
同时，他还要把论文发给学霸女友求帮忙，第二天他的文件夹里又有了：
毕业论文_最终版3.doc
毕业论文_女友版1.doc
毕业论文_女友版2.doc
几星期的煎熬下来，文件夹里多了几十份文件，小张的论文也快成型了，是时候把自己和女朋友的内容合并起来了。
这时又发生了一件喜闻乐见的事：U 盘中病毒了，而电脑里只有 1 个月前的版本……
如何拯救生无可恋的小张？其实，如果小张一早知道用「版本控制」工具就好了，他的文件可以整整齐齐地排列，就像这样：
版本    修改人   说明   日期
修改1   小张     
“哎呀，早知道能这样，就不用手动控制那么多版本啦！”
但这还不够，如果能有一个支持「论文托管 + 论文版本控制」的网站就更好了。这样一来，小张不但能和女朋友合作编辑内容，还不用担心因电脑故障，导致之前论文版本的丢失。
这时 —— 论文 Hub 出现了，它可以帮你托管论文，而且和版本控制工具无缝连接。

越来越多人发现了 论文 Hub 的好处，相继把论文托管在论文 Hub 上，网站上的论文越来越多。一些优秀的作者还会把论文开源出来，让每个人都可以查阅、交流、学习……

慢慢的，论文 Hub 变成了全球最大的「交友社区」，并逐渐演化成了一种时尚 —— 找工作时，面试官会先问你有没有 论文 hub 的账号，有多少个赞、多少粉丝；而有优秀作品的人，会被大公司争抢录用……

这个 论文 hub，就是我们今天要学习的 Github ，只不过论文换成了程序代码。Github 大概长这样：

在没有这两个工具时，编程可能是这样的：

哪个同事修改了我的代码 ?? 我要杀了他
我把自己的代码改崩溃了 ??? 我选择自杀
电脑崩溃、硬盘损坏、中毒，几万行代码找不到了 ??
但有了他们，一切都不一样了：

同步代码到网络仓库，在家里写好代码上传，回到公司就可以继续写了，而且不怕丢失。
记录每次代码的修改，即使把程序写崩了，也能及时回溯到上一个版本，这在产品更新时也经常使用。
可以多人协作完成项目，每个人的提交都有清晰的记录。
在之后的学习中，你也会不断用到 Git 和 Github，把你完成的项目、学习记录，同步在 Github 的仓库中。这样做的结果是：你将有一份 非常漂亮的 Github 主页，能给你的简历加分很多。

GitHub：使用 Ruby 编写，是一个基于 Git 的免费代码托管网站（有付费服务）

Git 的安装
Git 是一个版本控制系统，可以理解为一个工具，使用之前必须得先下载安装，所以第一步必须要安装。
Windows：GitForWindows
Linux：在终端输入命令行安装

在 GitHub 上创建仓库：https://github.com/lxk632751888/Demo.git

连接 Github 仓库：使用如下命令，将本地仓库连接到 GitHub 仓库中：
git remote add origin 仓库链接

push 命令：push 顾名思义，就是推送， 使用 push 可以把本地仓库推送到远端仓库中。具体命令如下：
git push origin master


克隆 GitHub 上的仓库：git clone [url]
git clone https://github.com/shiyanlou/gitproject























